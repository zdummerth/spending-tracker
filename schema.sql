/** 
* USERS
* Note: This table contains user data. Users should only be able to view and update their own data.
*/
create table users (
  -- UUID from auth.users
  id uuid references auth.users not null primary key,
  username text,
  avatar_url text
);

alter table users enable row level security;


create table transactions (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  amount int2,
  income_or_expense text,
  user_id uuid references users,
  isPublic boolean
);

create table categories (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  user_id uuid references users,
  income_or_expense text,
  name text,
  isPublic boolean
);

create table transaction_category (
  id bigint generated by default as identity primary key,
  transaction_id bigint not null references transactions,
  category_id bigint not null references categories,
  user_id uuid references users,
  isPublic boolean
);

alter table transactions
  enable row level security;

alter table categories
  enable row level security;

alter table transaction_category
  enable row level security;


create policy "Can view own user data." on users for select using (auth.uid() = id);
create policy "Can update own user data." on users for update using (auth.uid() = id);

create policy "Allow individual read access" on transactions for select using ( auth.uid() = user_id );
create policy "Allow individual insert access" on transactions for insert with check ( auth.uid() = user_id );
create policy "Allow individual delete access" on transactions for delete using ( auth.uid() = user_id );
create policy "Allow individual read access" on categories for select using ( auth.uid() = user_id );
create policy "Allow individual insert access" on categories for insert with check ( auth.uid() = user_id );
create policy "Allow individual update access" on categories for update using ( auth.uid() = user_id );
create policy "Allow individual delete access" on categories for delete using ( auth.uid() = user_id );
create policy "Allow individual read access" on transaction_category for select using ( auth.uid() = user_id );
create policy "Allow individual insert access" on transaction_category for insert with check ( auth.uid() = user_id );
create policy "Allow individual update access" on transaction_category for update using ( auth.uid() = user_id );
create policy "Allow individual delete access" on transaction_category for delete using ( auth.uid() = user_id );


/**
* This trigger automatically creates a user entry when a new user signs up via Supabase Auth.
*/ 
create function public.handle_new_user() 
returns trigger as $$
begin
  insert into public.users (id, username, avatar_url)
  values (new.id, new.raw_user_meta_data->>'username', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

